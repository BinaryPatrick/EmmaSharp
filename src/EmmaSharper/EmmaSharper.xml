<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EmmaSharper</name>
    </assembly>
    <members>
        <member name="M:EmmaSharper.Adapters.EmmaApiAdapter.#cctor">
            <summary>Emma API request adapter static configuration</summary>
        </member>
        <member name="M:EmmaSharper.Adapters.EmmaApiAdapter.MakeRequest``1(RestSharp.RestRequest,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Execute the Call to the Emma API. All methods return this base method</summary>
            <typeparam name="T">The model or type to bind the return response.</typeparam>
            <param name="request">The RestRequest request.</param>
            <param name="start">If more than 500 results, use these parameters to start/end pages.</param>
            <param name="end">If more than 500 results, use these parameters to start/end pages.</param>
            <returns>Response data from the API call.</returns>
        </member>
        <member name="M:EmmaSharper.Adapters.EmmaApiAdapter.SetAcceptedProtocolTypes(System.Net.SecurityProtocolType)">
            <summary>Sets accepted security type for Emma API requests</summary>
            <param name="acceptedProtocolTypes">Accepted types</param>
        </member>
        <member name="T:EmmaSharper.EmmaSharperExtensions">
            <summary>Extension methods for <see cref="N:EmmaSharper"/></summary>
        </member>
        <member name="M:EmmaSharper.EmmaSharperExtensions.AddEmmaApiProviders(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>Add Emma API Providers</summary>
        </member>
        <member name="M:EmmaSharper.EmmaSharperExtensions.AddEmmaApiProviders(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{EmmaSharper.EmmaOptions})">
            <summary>Add Emma API Providers</summary>
        </member>
        <member name="M:EmmaSharper.EmmaSharperExtensions.AddEmmaProviders(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>Add base Emma services and providers</summary>
        </member>
        <member name="M:EmmaSharper.EmmaSharperExtensions.ToEnumString``1(``0)">
            <summary>Convert <see cref="T:System.Enum"/> to <see cref="T:System.String"/></summary>
        </member>
        <member name="M:EmmaSharper.EmmaSharperExtensions.AsEnumStrings``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Converts a <see cref="T:System.Enum"/> into its direct string value, or attribute value when attributed.</summary>
        </member>
        <member name="M:EmmaSharper.EmmaSharperExtensions.JoinWith(System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>Syntactic sugar for <see cref="M:System.String.Join(System.Char,System.String[])"/></summary>
        </member>
        <member name="T:EmmaSharper.IAutomationProvider">
            <summary>Provides access to automation APIs</summary>
        </member>
        <member name="M:EmmaSharper.IAutomationProvider.GetWorkflowById(System.String)">
            <summary>Gets detailed information about a single workflow</summary>
            <param name="workflowId">The ID of the Workflow to return.</param>
            <returns>A single workflow if one exists</returns> 
        </member>
        <member name="M:EmmaSharper.IAutomationProvider.GetWorkflowCounts">
            <summary>Gets a count of this account’s automation workflows.</summary>
            <returns>A count of automation workflows in the given account.</returns>
        </member>
        <member name="M:EmmaSharper.IAutomationProvider.GetWorkflows">
            <summary>Gets a list of this account’s automation workflows.</summary>
            <returns>A list of automation workflows in the given account.</returns>
        </member>
        <member name="T:EmmaSharper.IDateRangeOpenToSelectionStage">
            <summary><see cref="T:EmmaSharper.DateRange"/> builder on the <see cref="P:EmmaSharper.DateRange.RangeEnd"/> selection step</summary>
        </member>
        <member name="M:EmmaSharper.IDateRangeOpenToSelectionStage.To(System.DateTime)">
            <summary>Sets the <see cref="P:EmmaSharper.DateRange.RangeEnd"/> to a specific date</summary>
        </member>
        <member name="M:EmmaSharper.IDateRangeOpenToSelectionStage.To(System.TimeSpan)">
            <summary>Sets a specific amount of time to end the date range at from the given <see cref="P:EmmaSharper.DateRange.RangeStart"/> value</summary>
            <remarks>Timespan can be negative</remarks>
        </member>
        <member name="M:EmmaSharper.IDateRangeOpenToSelectionStage.ToLatest">
            <summary>Sets the <see cref="P:EmmaSharper.DateRange.RangeEnd"/> to the current timestamp</summary>
        </member>
        <member name="T:EmmaSharper.IDateRangeToSelectionStage">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.IDateRangeToSelectionStage.ToBeginning">
            <summary>Sets the <see cref="P:EmmaSharper.DateRange.RangeEnd"/> to <see cref="F:System.DateTime.MinValue"/></summary>
        </member>
        <member name="M:EmmaSharper.IDateRangeToSelectionStage.ToEnd">
            <summary>Sets the <see cref="P:EmmaSharper.DateRange.RangeEnd"/> to <see cref="F:System.DateTime.MaxValue"/></summary>
        </member>
        <member name="T:EmmaSharper.IFieldsProvider">
            <summary>
            Provides access to custom fields in your account. Of particular interest is the <see cref="M:EmmaSharper.IFieldsProvider.ClearField(System.String)"/>
            method which lets you clear out all the data in a single field /// for all members in your account. This makes 
            it easy to re-initialize a dataset if you’re looking to correct an import error or syncing issue
            </summary>
        </member>
        <member name="M:EmmaSharper.IFieldsProvider.ListFieldsCount(System.Boolean)">
            <summary>Gets number of fields for paging</summary>
            <param name="includeDeleted">Accepts True. Optional flag to include deleted fields</param>
            <returns>An array of fields.</returns>
        </member>
        <member name="M:EmmaSharper.IFieldsProvider.ListFields(System.Boolean,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Gets a list of this account's defined fields. Be sure to get a count of fields before accessing this method, 
            so you're aware of paging requirements
            </summary>
            <param name="includeDeleted">Accepts True. Optional flag to include deleted fields</param>
            <param name="start">Start paging record at.</param>
            <param name="end">End paging record at.</param>
            <returns>An array of fields.</returns>
        </member>
        <member name="M:EmmaSharper.IFieldsProvider.GetField(System.String,System.Boolean)">
            <summary>Gets the detailed information about a particular field</summary>
            <param name="fieldId">The Field Id of the field to retrieve.</param>
            <param name="includeDeleted">Accepts True. Optionally show a field even if it has been deleted.</param>
            <returns>A field.</returns>
            <remarks>Http404 if the field does not exist.</remarks>
        </member>
        <member name="M:EmmaSharper.IFieldsProvider.CreateField(EmmaSharper.CreateField)">
            <summary>Create a new field. There must not already be a field with this name</summary>
            <param name="field">The Field to be created.</param>
            <returns>A reference (Field ID as int) to the new field.</returns>
        </member>
        <member name="M:EmmaSharper.IFieldsProvider.UpdateField(System.String,EmmaSharper.UpdateField)">
            <summary>Updates an existing field</summary>
            <param name="fieldId">The Field Id of the field to update.</param>
            <param name="field">The Field to be updated.</param>
            <returns>A reference (Field ID as int) to the updated field.</returns>
        </member>
        <member name="M:EmmaSharper.IFieldsProvider.ClearField(System.String)">
            <summary>Clear the member data for the specified field</summary>
            <param name="fieldId">The Field Id of the field to clear.</param>
            <returns>True if all of the member field data is deleted</returns>
        </member>
        <member name="M:EmmaSharper.IFieldsProvider.DeleteField(System.String)">
            <summary>Deletes a field</summary>
            <param name="fieldId">The Field Id of the field to delete.</param>
            <returns>True if the field is deleted, False otherwise.</returns>
        </member>
        <member name="T:EmmaSharper.IGroupProvider">
            <summary>
            Provides access to manage all aspects of the groups in your account. In addition to various CRUD 
            methods, you can also use these endpoints to manage the members of your groups. You’ll want to use these 
            methods if you’re managing group membership for more than one member at a time. For dealing with single 
            members, there are better methods in the members endpoints.
            </summary>
        </member>
        <member name="M:EmmaSharper.IGroupProvider.ListGroupCount(System.Collections.Generic.IEnumerable{EmmaSharper.GroupType})">
            <summary>Get number of all active member groups for a single account</summary>
            <returns>An int of groups.</returns>
        </member>
        <member name="M:EmmaSharper.IGroupProvider.ListGroups(System.Collections.Generic.IEnumerable{EmmaSharper.GroupType},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Get a basic listing of all active member groups for a single account. Be sure to get a count of groups
            before accessing this method, so you're aware of paging requirements.
            </summary>
            <param name="groupType">Accepts a comma-separated string with one or more GroupTypes. Defaults to Group.</param>
            <param name="start">Start paging record at.</param>
            <param name="end">End paging record at.</param>
            <returns>An array of groups.</returns>
        </member>
        <member name="M:EmmaSharper.IGroupProvider.GetGroup(System.String)">
            <summary>Get the detailed information for a single member group</summary>
            <param name="memberGroupId">The Member Group Id to be retrieved.</param>
            <returns>A group.</returns>
            <remarks>Http404 if the group does not exist.</remarks>
        </member>
        <member name="M:EmmaSharper.IGroupProvider.CreateGroups(System.Collections.Generic.IEnumerable{EmmaSharper.GroupName})">
            <summary>Create one or more new member groups</summary>
            <param name="groups">A Group to be created. Each object must contain a group_name parameter.</param>
            <returns>An array of the new group ids and group names.</returns>
        </member>
        <member name="M:EmmaSharper.IGroupProvider.UpdateGroup(System.String,EmmaSharper.UpdateGroup)">
            <summary>Update information for a single member group</summary>
            <param name="memberGroupId">The Member Group Id to be updated.</param>
            <param name="group">The Group to be updated.</param>
            <returns>True if the update was successful</returns>
            <remarks>Http404 if the group does not exist.</remarks>
        </member>
        <member name="M:EmmaSharper.IGroupProvider.DeleteGroup(System.String)">
            <summary>Delete a single member group</summary>
            <param name="memberIdGroup">The Member Group Id to be deleted.</param>
            <returns>True if the group is deleted.</returns>
            <remarks>Http404 if the group does not exist.</remarks>
        </member>
        <member name="M:EmmaSharper.IGroupProvider.ListGroupMembersCount(System.String,System.Boolean)">
            <summary>Get the count of members in a single active member group</summary>
            <param name="memberGroupId">The Member Group Id to be retrieved.</param>
            <param name="includeDeleted">Include deleted members. Optional, defaults to false.</param>
            <returns>An array of members.</returns>
            <remarks>Http404 if the group does not exist.</remarks>
        </member>
        <member name="M:EmmaSharper.IGroupProvider.ListGroupMembers(System.String,System.Boolean,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Get the members in a single active member group</summary>
            <param name="memberGroupId">The Member Group Id to be retrieved.</param>
            <param name="includeDeleted">Include deleted members. Optional, defaults to false.</param>
            <param name="start">Start paging record at.</param>
            <param name="end">End paging record at.</param>
            <returns>An array of members.</returns>
            <remarks>Http404 if the group does not exist.</remarks>
        </member>
        <member name="M:EmmaSharper.IGroupProvider.AddMembersToGroup(System.String,EmmaSharper.MemberIdList)">
            <summary>Add a list of members to a single active member group</summary>
            <param name="memberGroupId">The Member Group Id to be retrieved.</param>
            <param name="memberIds">An array of member ids.</param>
            <returns>An array of references to the members added to the group. If a member already exists in the group or is not a valid member, that reference will not be returned.</returns>
            <remarks>Http404 if the group does not exist.</remarks>
        </member>
        <member name="M:EmmaSharper.IGroupProvider.CopyUsersFromGroup(System.String,System.String,EmmaSharper.MemberStatusShortList)">
            <summary>Copy all the users of one group into another group</summary>
            <param name="fromGroupId">The Member Group ID to be copied from.</param>
            <param name="toGroupId">The Member Group ID to be copied to.</param>
            <param name="status">An Array of Member Status strings. This is ‘a’ (active), ‘o’ (optout), or ‘e’ (error).</param>
            <returns>Returns true.</returns>
            <remarks>Http404 if the group does not exist.</remarks>
        </member>
        <member name="M:EmmaSharper.IGroupProvider.RemoveMembersFromGroup(System.String,EmmaSharper.MemberIdList)">
            <summary>Remove members from a single active member group</summary>
            <param name="memberGroupId">The Member Group Id to be retrieved.</param>
            <param name="memberIds">An array of member ids.</param>
            <returns>An array of references to the removed members.</returns>
            <remarks>Http404 if the group does not exist.</remarks>
        </member>
        <member name="M:EmmaSharper.IGroupProvider.DeleteAllMembersFromGroup(System.String,System.Nullable{EmmaSharper.MemberStatusShort})">
            <summary>Remove all members from a single active member group</summary>
            <param name="memberGroupId">The Member Group Id to be retrieved.</param>
            <param name="status">A Member Status string. Optional. This is ‘a’ (active), ‘o’ (optout), or ‘e’ (error).</param>
            <returns>Returns the number of members removed from the group.</returns>
            <remarks>Http404 if the group does not exist.</remarks>
        </member>
        <member name="M:EmmaSharper.IGroupProvider.DeleteAllFromMemberGroupsByStatus(System.String,EmmaSharper.MemberStatusShort)">
            <summary>
            Delete all members in this group with the specified status. Then, remove those members from all active 
            member groups as a background job. The member_status_id parameter must be set.
            </summary>
            <param name="memberGroupId">The Member Group Id to be retrieved.</param>
            <param name="status">A Member Status string. This is ‘a’ (active), ‘o’ (optout), or ‘e’ (error).</param>
            <returns>Returns true.</returns>
            <remarks>Http404 if the group does not exist.</remarks>
        </member>
        <member name="T:EmmaSharper.IMailingProvider">
            <summary>
            Provides a way to retrieve information about your mailings including their HTML contents. You
            can retrieve the members to whom the mailing was sent. You can also pause mailings and cancel mailings
            that are pending or paused.
            </summary>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.ListMailingsCount(System.Collections.Generic.IEnumerable{EmmaSharper.MailingType},System.Collections.Generic.IEnumerable{EmmaSharper.MailingStatus},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Get number of current mailings</summary>
            <param name="mailingTypes">Accepts a List with one or more of the following mailing types: ‘m’ (standard), ‘t’ (test), ‘r’ (trigger), ‘s’ (split). Defaults to ‘m,t’, standard and test mailings, when none are specified.</param>
            <param name="mailingStatuses">Accepts a List with one or more of the following mailing statuses: ‘p’ (pending), ‘a’ (paused), ‘s’ (sending), ‘x’ (canceled), ‘c’ (complete), ‘f’ (failed). Defaults to ‘p,a,s,x,c,f’, all statuses, when none are specified.</param>
            <param name="includeArchived">Boolean. Optional flag to include archived mailings in the list.</param>
            <param name="includeScheduled">Boolean. Mailings that have a scheduled timestamp.</param>
            <param name="includeHtmlBody">Boolean. Include the html_body content.</param>
            <param name="includePlaintext">Boolean. Include the plaintext content.</param>
            <returns>An number of mailings.</returns>
            <remarks>Http400 if invalid mailing types or statuses are specified.</remarks>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.ListMailings(System.Collections.Generic.IEnumerable{EmmaSharper.MailingType},System.Collections.Generic.IEnumerable{EmmaSharper.MailingStatus},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Get information about current mailings. Be sure to get a count of mailings before accessing this method, so 
            you're aware of paging requirements.
            </summary>
            <param name="mailingTypes">
            Accepts a List with one or more of the following mailing types: ‘m’ (standard), ‘t’ (test), ‘r’ (trigger),
            ‘s’ (split). Defaults to ‘m,t’, standard and test mailings, when none are specified.
            </param>
            <param name="mailingStatuses">
            Accepts a List with one or more of the following mailing statuses: ‘p’ (pending), ‘a’ (paused), ‘s’ (sending),
            ‘x’ (canceled), ‘c’ (complete), ‘f’ (failed). Defaults to ‘p,a,s,x,c,f’, all statuses, when none are specified.
            </param>
            <param name="includeArchived">Boolean. Optional flag to include archived mailings in the list.</param>
            <param name="includeScheduled">Boolean. Mailings that have a scheduled timestamp.</param>
            <param name="includeHtmlBody">Boolean. Include the html_body content.</param>
            <param name="includePlaintext">Boolean. Include the plaintext content.</param>
            <param name="start">Start paging record at.</param>
            <param name="end">End paging record at.</param>
            <returns>An array of mailings.</returns>
            <remarks>Http400 if invalid mailing types or statuses are specified.</remarks>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.GetMailing(System.String)">
            <summary>Get detailed information for one mailing.</summary>
            <returns>The mailing.</returns>
            <param name="mailingId">Mailing identifier.</param>
            <remarks>Http404 if no mailing is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.GetMailingMembersCount(System.String)">
            <summary>Get the count of members to whom the given mailing was sent. This does not include groups or searches.</summary>
            <returns>An array of members including status and member fields.</returns>
            <param name="mailingId">Mailing identifier.</param>
            <remarks>Http404 if no mailing is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.GetMailingMembers(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Get the list of members to whom the given mailing was sent. This does not include groups or searches.</summary>
            <param name="mailingId">Mailing identifier.</param>
            <param name="start">Start paging record at.</param>
            <param name="end">End paging record at.</param>
            <returns>An array of members including status and member fields.</returns>
            <remarks>Http404 if no mailing is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.GetMailingMembersPersonalization(System.String,System.String,System.Nullable{EmmaSharper.PersonalizationType})">
            <summary>Gets the personalized message content as sent to a specific member as part of the specified mailing.</summary>
            <returns>Message content from a mailing, personalized for a member. The response will contain all parts of the mailing content by default, or just the type of content specified by type..</returns>
            <param name="mailingId">Mailing identifier.</param>
            <param name="memberId">Member identifier.</param>
            <param name="type">Accepts: ‘all’, ‘html’, ‘plaintext’, ‘subject’. Defaults to ‘all’, if not provided.</param>
            <remarks>Http404 if no mailing is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.GetMailingGroupsCount(System.String)">
            <summary>Get the count of groups to which a particular mailing was sent.</summary>
            <returns>An array of groups.</returns>
            <param name="mailingId">Mailing identifier.</param>
            <remarks>Http404 if no mailing is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.GetMailingGroups(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Get the groups to which a particular mailing was sent.</summary>
            <param name="mailingId">Mailing identifier.</param>
            <param name="start">Start paging record at.</param>
            <param name="end">End paging record at.</param>
            <returns>An array of groups.</returns>
            <remarks>Http404 if no mailing is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.GetMailingSearches(System.String)">
            <summary>Get all searches associated with a sent mailing.</summary>
            <returns>An array of searches.</returns>
            <param name="mailingId">Mailing identifier.</param>
            <remarks>Http404 if no mailing is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.UpdateMailingStatus(System.String,EmmaSharper.UpdateMailingStatus)">
            <summary>Update status of a current mailing.</summary>
            <returns>Returns the mailing’s new status.</returns> 
            <param name="mailingId">Mailing identifier.</param>
            <param name="status">The status can be one of canceled, paused or ready. This method can be used to control the progress of a mailing by pausing, canceling or resuming it. Once a mailing is canceled it can’t be resumed, and will not show in the normal mailing_list output.</param>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.ArchiveMailing(System.String)">
            <summary>Sets archived timestamp for a mailing so it is no longer included in mailing_list.</summary>
            <returns>True if the mailing is successfully archived.</returns>
            <param name="mailingId">Mailing identifier.</param>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.CancelMailing(System.String)">
            <summary>Cancels a mailing that has a current status of pending or paused. All other statuses will result in a 404.</summary>
            <returns>True if mailing marked as cancelled.</returns>
            <param name="mailingId">Mailing identifier.</param>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.ForwardMailing(System.String,System.String,EmmaSharper.ForwardMailing)">
            <summary>
            Forward a previous message to additional recipients. If these recipients are not already in the 
            audience, they will be added with a status of FORWARDED.
            </summary>
            <returns>A reference to the new mailing.</returns>
            <param name="mailingId">Mailing identifier.</param>
            <param name="memberId">Member identifier.</param>
            <param name="mailing">Class representing the fields to forward and email to additional recipients.</param>
            <remarks>Http404 if no message is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.ResendMailing(System.String,EmmaSharper.ResendMailing)">
            <summary>Send a prior mailing to additional recipients. A new mailing will be created that inherits its content from the original.</summary>
            <returns>The mailing id of the new mailing.</returns>
            <param name="mailingId">Mailing identifier.</param>
            <param name="mailing">Class representing the available fields when resending a mailing.</param>
            <remarks>Http404 if no message is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.DeclareWinner(System.String,System.String)">
            <summary>
            Declare the winner of a split test manually. In the event that the test duration has not elapsed, 
            the current stats for each test will be frozen and the content defined in the user declared winner 
            will sent to the remaining members for the mailing. Please note, any messages that are pending for 
            each of the test variations will receive the content assigned to them when the test was initially
            constructed.
            </summary>
            <returns><c>true</c>, if winner was declared, <c>false</c> otherwise.</returns>
            <param name="mailingId">Mailing identifier.</param>
            <param name="winnerId">Winner identifier.</param>
            <remarks>Http403 if the winner cannot be manually declared.</remarks>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.GetHeadsUpEmailsForMailing(System.String)">
            <summary>Get heads up email address(es) related to a mailing.</summary>
            <returns>An array of heads up email addresses.</returns>
            <param name="mailingId">Mailing identifier.</param>
        </member>
        <member name="M:EmmaSharper.IMailingProvider.VaildatePersonalizationSyntax(EmmaSharper.MailingPersonalization)">
            <summary>Validate that a mailing has valid personalization-tag syntax. Checks tag syntax in three params:</summary>
            <returns><c>true</c>, if personalization syntax was validated, <c>false</c> otherwise.</returns>
            <param name="personalization">HTML body, plaintext body and subject line for personalization testing.</param>
            <remarks>Http400 if any tags are invalid. The response body will have information about the invalid tags.</remarks>
        </member>
        <member name="T:EmmaSharper.IMemberProvider">
            <summary>
            In addition to the various CRUD endpoints here related to members, you can also change the status of members, including 
            opting them out. You’ll notice that there are calls related to individual members, but we also provide quite a few calls
            to deal with bulk updates of members. Please try to use these whenever possible as opposed to looping through a list of 
            members and calling the individual member calls. Where this is especially important is when adding new members. To do a 
            bulk import, you’ll POST to the <see cref="M:EmmaSharper.IMemberProvider.AddNewMembers(EmmaSharper.AddMembers)"/> method. In return, you’ll receive an import ID. You can use 
            this ID to check the status and results of your import. Imports are generally pretty fast, but the time to completion 
            can vary with greater system usage.
            </summary>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.AddMemberToGroups(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Add a single member to one or more groups.</summary>
            <param name="memberId">Member identifier.</param>
            <param name="groupIds">Group ids to which to add this member.</param>
            <returns>An array of ids of the affected groups.</returns>
            <remarks>Http404 if no member is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.AddNewMembers(EmmaSharper.AddMembers)">
            <summary>
            Add new members or update existing members in bulk. If you are doing actions for a single member please see the <see cref="M:EmmaSharper.IMemberProvider.AddOrUpdateSingleMember(EmmaSharper.AddMember)"/> method.
            </summary>
            <param name="members">An array of members to update. A member is a dictionary of member emails and field values to import. The only required field is “email”. All other fields are treated as the name of a member field.</param>
            <returns>An import id.</returns>
            <remarks></remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.AddOrUpdateSingleMember(EmmaSharper.AddMember)">
            <summary>
            Adds or updates a single audience member. If you are performing actions on bulk members please use the <see cref="M:EmmaSharper.IMemberProvider.AddNewMembers(EmmaSharper.AddMembers)" /> method.
            </summary>
            <param name="member">Fields related to adding or updating a Member.</param>
            <returns>The member_id of the new or updated member, whether the member was added or an existing member was updated, and the status of the member. The status will be reported as ‘a’ (active), ‘e’ (error), or ‘o’ (optout).</returns>
            <remarks></remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.ChangeMemberStatus(EmmaSharper.ChangeStatus)">
            <summary>
            Change the status for an array of members. The members will have their member_status_id update
            </summary>
            <param name="status">Class representing members and their new status.</param>
            <returns>True if the members are successfully updated, otherwise False.</returns>
            <remarks></remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.CopyMembersIntoStatusGroup(System.String,EmmaSharper.CopyStatus)">
            <summary>Copy all account members of one or more statuses into a group.</summary>
            <param name="groupId">Group identifier.</param>
            <param name="status">Class representing a list of Member statuses: ‘a’ (active), ‘o’ (optout), and/or ‘e’ (error).</param>
            <returns>True</returns>
            <remarks>Http404 if the group does not exist.</remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.DeleteAllMembers(EmmaSharper.MemberStatusShort)">
            <summary>Delete all members.</summary>
            <param name="memberStatusId">This is ‘a’ (active), ‘o’ (optout), or ‘e’ (error).</param>
            <returns>Returns true.</returns>
            <remarks></remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.DeleteMember(System.String)">
            <summary>
            Delete the specified member. The member, along with any associated response and history information, will be completely removed from the database.
            </summary>
            <param name="memberId">Member identifier.</param>
            <returns>True if the member is deleted.</returns>
            <remarks>Http404 if no member is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.DeleteMembers(EmmaSharper.DeleteMembers)">
            <summary>
            Delete an array of members. The members will be marked as deleted and cannot be retrieved.
            </summary>
            <param name="members">Class representing an array of member ids to delete.</param>
            <returns>True if all members are successfully deleted, otherwise False.</returns>
            <remarks></remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.GetAllImports(System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Get information about all imports for this account.</summary>
            <param name="start">Pagination: start page. Defaults to first page (e.g. 0).</param>
            <param name="end">Pagination: end page. Defaults to first page (e.g. 500).</param>
            <returns>An array of import details.</returns>
            <remarks></remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.GetAllImportsCount">
            <summary>Get a count of all imports for this account.</summary>
            <returns>An array of import details.</returns>
            <remarks></remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.GetImportInformation(System.String)">
            <summary>Get information and statistics about this import.</summary>
            <param name="importId">Import identifier.</param>
            <returns>Import details for the given import_id.</returns>
            <remarks></remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.GetMember(System.String,System.Boolean)">
            <summary>Get detailed information on a particular member, including all custom fields.</summary>
            <returns>A single member if one exists.</returns>
            <param name="memberId">Member identifier.</param>
            <param name="includeDeleted">Accepts True. Optional flag to include deleted members.</param>
            <remarks>Http404 if no member is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.GetMemberByEmail(System.String,System.Boolean)">
            <summary>Get detailed information on a particular member, including all custom fields, by email address instead of ID.</summary>
            <returns>A single member if one exists.</returns>
            <param name="memberEmail">Member email.</param>
            <param name="includeDeleted">Accepts True. Optional flag to include deleted members.</param>
            <remarks>Http404 if no member is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.GetMemberCount(System.Boolean)">
            <summary>Get a count of all members in an account.</summary>
            <returns>A list of members in the given account.</returns>
            <param name="includeDeleted">Accepts True. Optional flag to include deleted members.</param>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.GetMemberGroups(System.String)">
            <summary>Get the groups to which a member belongs.</summary>
            <param name="memberId">Member identifier.</param>
            <returns>An array of groups.</returns>
            <remarks>Http404 if no member is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.GetMemberMailingHistory(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Get the entire mailing history for a member.</summary>
            <param name="memberId">Member identifier.</param>
            <param name="start">Pagination: start page. Defaults to first page (e.g. 0).</param>
            <param name="end">Pagination: end page. Defaults to first page (e.g. 500).</param>
            <returns>Message history details for the specified member.</returns>
            <remarks></remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.GetMemberMailingHistoryCount(System.String)">
            <summary>Get the number of mailing history entries for a member.</summary>
            <param name="memberId">Member identifier.</param>
            <returns>Message history details for the specified member.</returns>
            <remarks></remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.GetMemberOptout(System.String)">
            <summary>If a member has been opted out, returns the details of their optout, specifically date and mailing_id.</summary>
            <param name="memberId">Member identifier.</param>
            <returns>Member opt out date and mailing if member is opted out.</returns>
            <remarks>Http404 if no member is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.GetMembersAffectedByImport(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Get a list of members affected by this import.</summary>
            <param name="importId">Import identifier.</param>
            <param name="start">Pagination: start page. Defaults to first page (e.g. 0).</param>
            <param name="end">Pagination: end page. Defaults to first page (e.g. 500).</param>
            <returns>A list of members in the given account and import.</returns>
            <remarks></remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.GetMembersAffectedByImportCount(System.String)">
            <summary>Get a count of members affected by this import.</summary>
            <param name="importId">Import identifier.</param>
            <returns>A list of members in the given account and import.</returns>
            <remarks></remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.ListMembers(System.Boolean,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Get a basic listing of all members in an account.</summary>
            <returns>A list of members in the given account.</returns>
            <param name="includeDeleted">Accepts True. Optional flag to include deleted members.</param>
            <param name="start">Pagination: start page. Defaults to first page (e.g. 0).</param>
            <param name="end">Pagination: end page. Defaults to first page (e.g. 500).</param>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.MemberSignup(EmmaSharper.SignupMember)">
            <summary>
            Takes the necessary actions to signup a member and enlist them in the provided group ids. You can send the same member multiple times and pass in new group ids to signup. This process triggers the opt-out workflow, and will send a mailing to the member on new group enlistments. If no new group ids are provided for an existing member, the endpoint will respond back with their status and member_id, performing no additional actions.
            </summary>
            <param name="member">Fields related to signing up a member.</param>
            <returns>The member_id of the member, and their status. The status will be reported as ‘a’ (active), ‘e’ (error), or ‘o’ (optout).</returns>
            <remarks></remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.RemoveMemberFromAllGroups(System.String)">
            <summary>Remove the specified member from all groups.</summary>
            <param name="memberId">Member identifier.</param>
            <returns>True if the member is removed from all groups.</returns>
            <remarks>Http404 if no member is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.RemoveMemberFromGroups(System.String,System.Collections.Generic.List{System.Int32})">
            <summary>Remove a single member from one or more groups.</summary>
            <param name="memberId">Member identifier.</param>
            <param name="groupIds">Group ids from which to remove this member</param>
            <returns>An array of references to the affected groups.</returns>
            <remarks>Http404 if no member is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.RemoveMembersFromGroups(EmmaSharper.RemoveMemberGroups)">
            <summary>Remove multiple members from groups.</summary>
            <param name="groups">Class representing members and the groups to remove them from.</param>
            <returns>True if the members are deleted, otherwise False.</returns>
            <remarks>Http404 if any of the members or groups do not exist</remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.UpdateMemberToOptoutByEmail(System.String)">
            <summary>Update a member’s status to optout keyed on email address instead of an ID.</summary>
            <param name="memberEmail">Member email address for optout.</param>
            <returns>True if member status change was successful or member was already opted out.</returns>
            <remarks>Http404 if no member is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.UpdateSingleMemberInformation(System.String,EmmaSharper.UpdateMember)">
            <summary>
            Update a single member’s information. Update the information for an existing member (even if they are marked as deleted). Note that this method allows the email address to be updated (which cannot be done with a POST, since in that case the email address is used to identify the member).
            </summary>
            <param name="memberId">Member identifier.</param>
            <param name="member">Class representing fields to update member information.</param>
            <returns>True if the member was updated successfully</returns>
            <remarks>Http404 if no member is found.</remarks>
        </member>
        <member name="M:EmmaSharper.IMemberProvider.UpdateStatusOfGroupMembersBasedOnCurrentStatus(EmmaSharper.MemberStatusShort,EmmaSharper.MemberStatusShort,System.String)">
            <summary>
            Update the status for a group of members, based on their current status. Valid statuses id 
            are (‘a’,’e’, ‘f’, ‘o’) active, error, forwarded, optout.
            </summary>
            <param name="statusFrom">The current status of the members.</param>
            <param name="statusTo">The updated status of the members.</param>
            <param name="groupId">Optional. Limit the update to members of the specified group</param>
            <returns>True</returns>
            <remarks>Http400 if the specified status is invalid</remarks>
        </member>
        <member name="T:EmmaSharper.IResponseProvider">
            <summary>
            Provides access to response data. You can get overview numbers for all of your mailings and also drill down 
            into finding out the actual members who opened a particular mailing.
            </summary>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingClicks(System.String,System.String,System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Get the list of clicks for this mailing/// </summary>
            <param name="mailingId">Mailing Identifier</param>
            <param name="memberId">Optional. Limits results to a single member.</param>
            <param name="linkId">Optional. Limits results to a single link.</param>
            <param name="start">Start paging record at.</param>
            <param name="end">End paging record at.</param>
            <returns>An array of link objects for the mailing.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing type - ‘m’ for
            standard mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingClicksCount(System.String)">
            <summary>Get the count of the list of clicks for this mailing</summary>
            <param name="mailingId">Mailing Identifier</param>
            <returns>An array of link objects for the mailing.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing type - ‘m’ for 
            standard mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingCustomerShare(System.String)">
            <summary>Get the customer share associated with the share id.</summary>
            <param name="shareId">Share Identifier</param>
            <returns>A customer share for the mailing.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid 
            mailing type - ‘m’ for standard mailings, ‘t’ for test mailings and ‘r’ for
            trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingCustomerShareClicks(System.String)">
            <summary>Get the list of customer share clicks for this mailing.</summary>
            <param name="mailingId">Mailing Identifier</param>
            <returns>An array of customer share click objects for the mailing.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid
            mailing type - ‘m’ for standard mailings, ‘t’ for test mailings and ‘r’ for
            trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingCustomerShares(System.String)">
            <summary>Get the list of customer shares for this mailing.</summary>
            <param name="mailingId">Mailing Identifier</param>
            <returns>An array of customer shares objects for the mailing.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing 
            type - ‘m’ for standard mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingDelieveries(System.String,EmmaSharper.DeliveryType,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Get the list of messages that have finished delivery. This will include those that were 
            successfully delivered, as well as those that failed due to hard or soft bounces.
            </summary>
            <param name="mailingId">Mailing Identifier</param>
            <param name="result">Optional. Accepted options: ‘all’, ‘delivered’, ‘bounced’, ‘hard’, ‘soft’. Defaults to ‘all’, if not provided.</param>
            <param name="start">Start paging record at.</param>
            <param name="end">End paging record at.</param>
            <returns>An array of message responses that have finished delivery.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing 
            type - ‘m’ for standard mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingDelieveriesCount(System.String,EmmaSharper.DeliveryType)">
            <summary>
            Get the count of the list of messages that have finished delivery. This will include those that were successfully 
            delivered, as well as those that failed due to hard or soft bounces.
            </summary>
            <param name="mailingId">Mailing Identifier</param>
            <param name="result">Optional. Accepted options: ‘all’, ‘delivered’, ‘bounced’, ‘hard’, ‘soft’. Defaults to ‘all’, if not provided.</param>
            <returns>An array of message responses that have finished delivery.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing type - ‘m’ 
            for standard mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingForwards(System.String)">
            <summary>Get the list of forwards for this mailing</summary>
            <param name="mailingId">Mailing Identifier</param>
            <returns>An array of forwards objects for the mailing.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing type - ‘m’
            for standard mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingInProgress(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Get the list of messages that are in the queue, possibly sent, but not yet delivered.</summary>
            <param name="mailingId">Mailing Identifier</param>
            <param name="start">Start paging record at.</param>
            <param name="end">End paging record at.</param>
            <returns>Get the list of messages that are in-progress.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing type - ‘m’ 
            for standard mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingInProgressCount(System.String)">
            <summary>Get the count of the list of messages that are in the queue, possibly sent, but not yet delivered.</summary>
            <param name="mailingId">Mailing Identifier</param>
            <returns>Get the list of messages that are in-progress.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing type - ‘m’ for
            standard mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingLinks(System.String)">
            <summary>Get the list of links for this mailing</summary>
            <param name="mailingId">Mailing Identifier</param>
            <returns>An array of link objects for the mailing.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing type - ‘m’ for standard
            mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingOpens(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Get the count of the list of opened messages for this campaign</summary>
            <param name="mailingId">Mailing Identifier</param>
            <param name="start">Start paging record at.</param>
            <param name="end">End paging record at.</param>
            <returns>Get the list of messages that opened.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing type - ‘m’ for standard
            mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingOpensCount(System.String)">
            <summary>Get the list of opened messages for this campaign.</summary>
            <param name="mailingId">Mailing Identifier</param>
            <returns>Get the list of messages that opened.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing type - ‘m’
            for standard mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingOptouts(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Get the list of optouts for this mailing.</summary>
            <param name="mailingId">Mailing Identifier</param>
            <param name="start">Start paging record at.</param>
            <param name="end">End paging record at.</param>
            <returns>An array of optouts objects for the mailing.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing type - ‘m’ 
            for standard mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingOptoutsCount(System.String)">
            <summary>Get the count of the list of optouts for this mailing.</summary>
            <param name="mailingId">Mailing Identifier</param>
            <returns>An array of optouts objects for the mailing.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing type - ‘m’ 
            for standard mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingResponse(System.String)">
            <summary>
            Get the response summary for a particular mailing. This method will return the counts of each type of 
            response activity for a particular mailing.
            </summary>
            <param name="mailingId">Mailing Identifier</param>
            <returns>A single mailing object.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing type - ‘m’ 
            for standard mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingSends(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Get the list of messages that have been sent to an MTA (Message Transfer Agent) for delivery.</summary>
            <param name="mailingId">Mailing Identifier</param>
            <param name="start">Start paging record at.</param>
            <param name="end">End paging record at.</param>
            <returns>Get the list of messages that have been sent to an MTA for delivery.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing type - ‘m’ 
            for standard mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingSendsCount(System.String)">
            <summary>Get the count of the list of messages that have been sent to an MTA (Message Transfer Agent) for delivery.</summary>
            <param name="mailingId">Mailing Identifier</param>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing type - ‘m’ 
            for standard mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingShares(System.String)">
            <summary>Get the list of shares for this mailing.</summary>
            <param name="mailingId">Mailing Identifier</param>
            <returns>An array of signups objects for the mailing.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid 
            mailing type - ‘m’ for standard mailings, ‘t’ for test mailings and ‘r’ for
            trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingSharesOverview(System.String)">
            <summary>Get overview of shares pertaining to this mailing_id.</summary>
            <param name="mailingId">Mailing Identifier</param>
            <returns>An array of share summary objects for the mailing, by network.</returns>
            <remarks>Http404 if the mailing does not exist. Http404 if the mailing is not valid.</remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetMailingSignups(System.String)">
            <summary>Get the list of signups for this mailing.</summary>
            <param name="mailingId">Mailing Identifier</param>
            <returns>An array of signups objects for the mailing.</returns>
            <remarks>
            Http404 if the mailing does not exist. Http404 if the mailing is not valid mailing type - ‘m’ for 
            standard mailings, ‘t’ for test mailings and ‘r’ for trigger mailings.
            </remarks>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetResponseSummary(System.Nullable{EmmaSharper.DateRange},System.Boolean)">
            <summary>
            Get the response summary for an account. This method will return a month-based time series of data including sends, 
            opens, clicks, mailings, forwards, and opt-outs. Test mailings and forwards are not included in the data returned.
            </summary>
            <param name="includeArchived">Optional flag to include archived mailings in the list.</param>
            <param name="range">Optional DateRange object to build the range parameter.</param>
            <returns>A list of objects with each object representing one month.</returns>
        </member>
        <member name="M:EmmaSharper.IResponseProvider.GetResponseSummary(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Get the response summary for an account. This method will return a month-based time series of data including sends, 
            opens, clicks, mailings, forwards, and opt-outs. Test mailings and forwards are not included in the data returned.
            </summary>
            <param name="includeArchived">Optional flag to include archived mailings in the list.</param>
            <param name="date">Optional date to build the range parameter.</param>
            <returns>A list of objects with each object representing one month.</returns>
        </member>
        <member name="T:EmmaSharper.ISearchProvider">
            <summary>
            Provides access to create, edit, and delete searches. You can also retrieve the members matching 
            any search created in your account.
            </summary>
        </member>
        <member name="M:EmmaSharper.ISearchProvider.CreateSavedSearch(EmmaSharper.CreateSearch)">
            <summary>Create a saved search</summary>
            <param name="search">A name used to describe this search and a combination of search conditions, as described in the documentation.</param>
            <returns>The ID of the new search.</returns>
            <remarks>Http400 if the search is invalid.</remarks>
        </member>
        <member name="M:EmmaSharper.ISearchProvider.DeleteSavedSearch(System.String)">
            <summary>Delete a saved search. The member records referred to by the search are not affected</summary>
            <param name="searchId">Search identifier</param>
            <returns>True if the search is deleted.</returns>
            <remarks>Http404 if the search does not exist.</remarks>
        </member>
        <member name="M:EmmaSharper.ISearchProvider.GetMembersMatchingSearch(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Get the members matching the search</summary>
            <param name="searchId">Search identifier</param>
            <param name="start">Start paging record at.</param>
            <param name="end">End paging record at.</param>
            <returns>An array of members.</returns>
            <remarks>Http404 if the search does not exist.</remarks>
        </member>
        <member name="M:EmmaSharper.ISearchProvider.GetMembersMatchingSearchCount(System.String)">
            <summary>Get a count of the number of members matching the search</summary>
            <param name="searchId">Search identifier</param>
            <returns>An array of members.</returns>
        </member>
        <member name="M:EmmaSharper.ISearchProvider.GetSearchDetails(System.String,System.Boolean)">
            <summary>Get the details for a saved search</summary>
            <param name="searchId">Search identifier</param>
            <param name="includeDeleted">>Optional flag to include deleted searches.</param>
            <returns>A search.</returns>
            <remarks>Http404 if the search does not exist.</remarks>
        </member>
        <member name="M:EmmaSharper.ISearchProvider.GetSearches(System.Boolean,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Retrieve a list of saved searches</summary>
            <param name="includeDeleted">Optional flag to include deleted searches.</param>
            <param name="start">Start paging record at.</param>
            <param name="end">End paging record at.</param>
            <returns>An array of searches.</returns>
            <remarks></remarks>
        </member>
        <member name="M:EmmaSharper.ISearchProvider.GetSearchesCount(System.Boolean)">
            <summary>Get a count of the number of saved searches</summary>
            <param name="includeDeleted">Optional flag to include deleted searches.</param>
            <returns>An array of searches.</returns>
            <remarks></remarks>
        </member>
        <member name="M:EmmaSharper.ISearchProvider.UpdateSavedSearch(System.String,EmmaSharper.CreateSearch)">
            <summary>
            Update a saved search. No parameters are required, but either the name or criteria parameter must be present for an update to occur.
            </summary>
            <param name="searchId">Search identifier</param>
            <param name="search">A name used to describe this search and/or a combination of search conditions, as described in the documentation.</param>
            <returns>True if the update was successful</returns>
            <remarks>Http404 if the search does not exist. Http400 if the search criteria is invalid.</remarks>
        </member>
        <member name="T:EmmaSharper.ISignupFormProvider">
            <summary>Provides a list of all of your signup forms</summary>
        </member>
        <member name="M:EmmaSharper.ISignupFormProvider.GetSignupForms">
            <summary>Gets a list of this account’s signup forms</summary>
            <returns>An array of signup forms.</returns>
        </member>
        <member name="T:EmmaSharper.ISubscriptionProvider">
            <summary>Provides access to subscriptions and subscription members</summary>
        </member>
        <member name="M:EmmaSharper.ISubscriptionProvider.DeleteSubscription(System.String)">
            <summary>Delete a subscription</summary>
            <returns>Information about the subscription, including the date and time it was deleted.</returns>
            <param name="subscription_id ">the id to update</param>
        </member>
        <member name="M:EmmaSharper.ISubscriptionProvider.EditSubscription(EmmaSharper.SubscriptionNew,System.String)">
            <summary>Edit a subscription's name or description</summary>
            <returns>Information about the updated subscription.Limited to name and description.</returns>
            <param name="subscription">Name and description of the subscription text to update. Visible in the Subscription Center.</param>
            <param name="subscription_id ">the id to update</param>
        </member>
        <member name="M:EmmaSharper.ISubscriptionProvider.GetAccountSubscription(System.String)">
            <summary>Get detailed information for a specific subscription</summary>
            <returns>Information about a subscription.</returns>
            <param name="subscription_id">URL segment for the subscription ID to query details on</param>
        </member>
        <member name="M:EmmaSharper.ISubscriptionProvider.GetAccountSubscriptions(System.Boolean,System.Boolean)">
            <summary>Get a list of all subscriptions in an account</summary>
            <returns>A list of subscriptions in an account along with related information, including member count and subscription ID.</returns>
            <param name="includeDeletedOnly">true or false. Returns deleted subscriptions only. Optional, defaults to false.</param>
            <param name="includeDeleted">true or false. Returns deleted subscriptions along with active. Optional, defaults to false.</param>
        </member>
        <member name="M:EmmaSharper.ISubscriptionProvider.GetOptOutSubscriptionMembers(System.String,System.UInt32,System.UInt32)">
            <summary>Get a list of member IDs for members who have opted out of a specific subscription</summary>
            <returns>A list of member IDs.</returns>
            <param name="subscription_id">URL segment for the subscription ID to query details on</param>
            <param name="start">Pagination: start page. Defaults to first page (e.g. 0).</param>
            <param name="end">Pagination: end page. Defaults to first page (e.g. 500).</param>
        </member>
        <member name="M:EmmaSharper.ISubscriptionProvider.GetSubscriptionMembers(System.String,System.UInt32,System.UInt32)">
            <summary>Get a list of member IDs for members subscribed to a specific subscription</summary>
            <returns>A list of member IDs.</returns>
            <param name="subscription_id">URL segment for the subscription ID to query details on</param>
            <param name="start">Pagination: start page. Defaults to first page (e.g. 0).</param>
            <param name="end">Pagination: end page. Defaults to first page (e.g. 500).</param>
        </member>
        <member name="M:EmmaSharper.ISubscriptionProvider.PostBulkImportSubscriptions(EmmaSharper.SubscriptionImportBulk,System.String)">
            <summary>Bulk subscribe members to a subscription using the import ID of all members</summary>
            <returns>True if successful.</returns>
            <param name="importId">import ID to bulk subscribe</param>
            <param name="subscription_id">subscription id</param>
        </member>
        <member name="M:EmmaSharper.ISubscriptionProvider.PostBulkMemberSubscriptions(EmmaSharper.SubscriptionBulk,System.String)">
            <summary>Bulk subscribe members to a subscription using a list of member IDs</summary>
            <returns>True if successful.</returns>
            <param name="memberIds">List of memberIDs</param>
            <param name="subscription_id">subscription id</param>
        </member>
        <member name="M:EmmaSharper.ISubscriptionProvider.PostNewSubscription(EmmaSharper.SubscriptionNew)">
            <summary>Create a subscription</summary>
            <returns> Information about the created subscription, including the subscription ID.</returns>
            <param name="subscription">Name and description of the new subscription to create</param>
        </member>
        <member name="T:EmmaSharper.IWebhookProvider">
            <summary>Provides access to webhooks</summary>
        </member>
        <member name="M:EmmaSharper.IWebhookProvider.CreateWebhook(EmmaSharper.CreateWebhook)">
            <summary>Create an new webhook</summary>
            <param name="webhook">The webhook to be created.</param>
            <returns>The ID of the newly created webhook.</returns>@Html.Raw(breadcrumb.Item3)
        </member>
        <member name="M:EmmaSharper.IWebhookProvider.DeleteAllWebhooks">
            <summary>Delete all webhooks registered for an account</summary>
            <returns>True if the webhook deleted successfully.</returns>
        </member>
        <member name="M:EmmaSharper.IWebhookProvider.DeleteWebhookById(System.String)">
            <summary>Deletes an existing webhook</summary>
            <param name="webhookId">The ID of the Webhook to delete.</param>
            <returns>True if the webhook deleted successfully.</returns>
        </member>
        <member name="M:EmmaSharper.IWebhookProvider.GetWebhookById(System.String)">
            <summary>Get information for a specific webhook belonging to a specific account</summary>
            <param name="webhookId">The ID of the Webhook to return.</param>
            <returns>Details for a single webhook</returns>
        </member>
        <member name="M:EmmaSharper.IWebhookProvider.GetWebhookEvents">
            <summary>Get a listing of all event types that are available for webhooks</summary>
            <returns>A list of event types and descriptions</returns>
        </member>
        <member name="M:EmmaSharper.IWebhookProvider.GetWebhooks">
            <summary>Get a basic listing of all webhooks associated with an account</summary>
            <returns>A list of webhooks that belong to the given account.</returns>
        </member>
        <member name="M:EmmaSharper.IWebhookProvider.UpdateWebhook(System.String,EmmaSharper.UpdateWebhook)">
            <summary>Update an existing webhook</summary>
            <param name="webhookId">The ID of the Webhook to update.</param>
            <param name="webhook">The webhook parameters to be updated.</param>
            <returns>The id of the updated webhook, or False if the update failed.</returns>
        </member>
        <member name="T:EmmaSharper.Internals.EmmaDateJsonConverter">
            <summary>Custom date parser to handle Emma's unique date format</summary>
            <remarks>Date formate is "@D:2014-11-26T11:40:55"</remarks>
        </member>
        <member name="M:EmmaSharper.Internals.EmmaDateJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>Writes the JSON representation of the object. Writes a DateTime value that Emma expects.</summary>
            <param name="writer">Instance of the JsonWriter class.</param>
            <param name="value">The value of the Date to be serialized.</param>
            <param name="serializer">Instance of the JsonSearlizer class.</param>
        </member>
        <member name="M:EmmaSharper.Internals.EmmaDateJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>Reads the JSON representation of the object. In this case a DateTime that C# can parse.</summary>
            <param name="reader">Instance of the JsonReader class.</param>
            <param name="objectType">The type of object to read.</param>
            <param name="existingValue">The existing object value.</param>
            <param name="serializer">Instance of the JsonSearlizer class.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:EmmaSharper.Internals.EmmaDateJsonConverter.CanConvert(System.Type)">
            <summary>Determines whether this instance can convert the specified object type.</summary>
            <param name="objectType">Type of the object.</param>
            <returns>True if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="T:EmmaSharper.DateRange">
            <summary>Represents a date range from two <see cref="T:System.Nullable"/>&lt;<see cref="T:System.DateTime"/>&gt;s</summary>
            <remarks>Initialize using static <see cref="M:EmmaSharper.DateRange.From(System.DateTime)"/> methods</remarks>
        </member>
        <member name="M:EmmaSharper.DateRange.#ctor(System.DateTime,System.DateTime)">
            <inheritdoc cref="M:System.Object.#ctor"/>
        </member>
        <member name="P:EmmaSharper.DateRange.RangeStart">
            <summary>Range start date</summary>
        </member>
        <member name="P:EmmaSharper.DateRange.RangeEnd">
            <summary>Range end date</summary>
        </member>
        <member name="M:EmmaSharper.DateRange.Between(System.DateTime,System.DateTime)">
            <summary>Creates a date range between two timestamps</summary>
            <remarks>Timestamps can be given in any order</remarks>
        </member>
        <member name="M:EmmaSharper.DateRange.From(System.DateTime)">
            <summary>Builds a <see cref="T:EmmaSharper.DateRange"/> starting from the given timestamp</summary>
        </member>
        <member name="M:EmmaSharper.DateRange.FromLatest">
            <summary>Builds a <see cref="T:EmmaSharper.DateRange"/> starting from the current timestamp</summary>
        </member>
        <member name="M:EmmaSharper.DateRange.FromBegining">
            <summary>Builds a <see cref="T:EmmaSharper.DateRange"/> starting from <see cref="F:System.DateTime.MinValue"/></summary>
        </member>
        <member name="M:EmmaSharper.DateRange.FromEnd">
            <summary>Builds a <see cref="T:EmmaSharper.DateRange"/> starting from <see cref="F:System.DateTime.MaxValue"/></summary>
        </member>
        <member name="M:EmmaSharper.DateRange.ToString">
            <summary>Build a DateRage string for use in API call</summary>
        </member>
        <member name="T:EmmaSharper.EmmaOptions">
            <summary>Emma configuration options</summary>
        </member>
        <member name="P:EmmaSharper.EmmaOptions.BaseUrl">
            <summary>Represents the default Emma API endpoint</summary>
            <remarks><i>Default is <see href="https://api.e2ma.net"/></i></remarks>
        </member>
        <member name="P:EmmaSharper.EmmaOptions.AccountId">
            <summary>Unique Emma account identifier</summary>
        </member>
        <member name="P:EmmaSharper.EmmaOptions.PublicKey">
            <summary>Emma public key</summary>
        </member>
        <member name="P:EmmaSharper.EmmaOptions.SecretKey">
            <summary>Emma private key</summary>
        </member>
        <member name="T:EmmaSharper.ForwardMailing">
            <summary>
            Forward a previous message to additional recipients. If these recipients are not already in the audience, they will be added with a status of FORWARDED.
            </summary>
        </member>
        <member name="P:EmmaSharper.ForwardMailing.RecipientEmails">
            <summary>
            An array of email addresses to which to forward the specified message.
            </summary>
        </member>
        <member name="P:EmmaSharper.ForwardMailing.Note">
            <summary>
            A note to include in the forward. This note will be HTML encoded and is limited to 500 characters.
            </summary>
        </member>
        <member name="T:EmmaSharper.MailingHeadsUp">
            <summary>
            Class representing the return values on a heads up information of a mailing.
            </summary>
        </member>
        <member name="P:EmmaSharper.MailingHeadsUp.SentTimestamp">
            <summary>
            Timestamp of when the heads up mailing was sent.
            </summary>
        </member>
        <member name="P:EmmaSharper.MailingHeadsUp.Email">
            <summary>
            Email address the heads up email was sent
            </summary>
        </member>
        <member name="P:EmmaSharper.MailingHeadsUp.MailingId">
            <summary>
            Mailing associated with these heads up mailings.
            </summary>
        </member>
        <member name="T:EmmaSharper.MailingIdentifier">
            <summary>
            Class including just the Mailing Identifier.
            </summary>
        </member>
        <member name="P:EmmaSharper.MailingIdentifier.MailingId">
            <summary>
            Mailing Identifier.
            </summary>
        </member>
        <member name="T:EmmaSharper.MailingPersonalization">
            <summary>
            Validate that a mailing has valid personalization-tag syntax.
            </summary>
        </member>
        <member name="P:EmmaSharper.MailingPersonalization.HtmlBody">
            <summary>
            The html contents of the mailing.
            </summary>
        </member>
        <member name="P:EmmaSharper.MailingPersonalization.Plaintext">
            <summary>
            The plaintext contents of the mailing. Unlike in create_mailing, this param is not required.
            </summary>
        </member>
        <member name="P:EmmaSharper.MailingPersonalization.Subject">
            <summary>
            The subject of the mailing.
            </summary>
        </member>
        <member name="T:EmmaSharper.ResendMailing">
            <summary>
            Send a prior mailing to additional recipients. A new mailing will be created that inherits its content from the original.
            </summary>
        </member>
        <member name="P:EmmaSharper.ResendMailing.RecipientEmails">
            <summary>
            An array of email addresses to which the new mailing should be sent.
            </summary>
        </member>
        <member name="P:EmmaSharper.ResendMailing.HeadsUpEmails">
            <summary>
            A list of email addresses that heads up notification emails will be sent to.
            </summary>
        </member>
        <member name="P:EmmaSharper.ResendMailing.RecipientGroups">
            <summary>
            An array of member groups to which the new mailing should be sent.
            </summary>
        </member>
        <member name="P:EmmaSharper.ResendMailing.RecipientSearches">
            <summary>
            A list of searches that this mailing should be sent to.
            </summary>
        </member>
        <member name="P:EmmaSharper.ResendMailing.Sender">
            <summary>
            The message sender. If this is not supplied, the sender of the original mailing will be used.
            </summary>
        </member>
        <member name="T:EmmaSharper.AddMember">
            <summary>Parameters to add a single member to an audience. Group Ids and Field Triggers are optional</summary>
        </member>
        <member name="M:EmmaSharper.AddMember.#ctor">
            <inheritdoc cref="M:System.Object.#ctor"/>
        </member>
        <member name="P:EmmaSharper.AddMember.MemberEmail">
            <summary>
            Email address of member to add or update
            </summary>
        </member>
        <member name="P:EmmaSharper.AddMember.Fields">
            <summary>
            Names and values of user-defined fields to update
            </summary>
        </member>
        <member name="P:EmmaSharper.AddMember.GroupIds">
            <summary>
            Optional. Add imported members to this list of groups.
            </summary>
        </member>
        <member name="P:EmmaSharper.AddMember.FieldTriggers">
            <summary>
            Optional. Fires related field change auto-responders when set to true.
            </summary>
        </member>
        <member name="T:EmmaSharper.AddMembers">
            <summary>Parameters to add a batch members to an audience</summary>
        </member>
        <member name="M:EmmaSharper.AddMembers.#ctor">
            <inheritdoc cref="M:System.Object.#ctor"/>
        </member>
        <member name="P:EmmaSharper.AddMembers.Members">
            <summary>
            Email address of member to add or update
            </summary>
        </member>
        <member name="P:EmmaSharper.AddMembers.SourceFileName">
            <summary>
            Names and values of user-defined fields to update
            </summary>
        </member>
        <member name="P:EmmaSharper.AddMembers.GroupIds">
            <summary>
            Optional. Add imported members to this list of groups.
            </summary>
        </member>
        <member name="P:EmmaSharper.AddMembers.AutomateFieldChanges">
            <summary>
            Optional. Fires related field change auto-responders when set to true.
            </summary>
        </member>
        <member name="P:EmmaSharper.AddMembers.AddOnly">
            <summary>
            Optional. Only add new members, ignore existing members.
            </summary>        
        </member>
        <member name="T:EmmaSharper.ChangeStatus">
            <summary>Change the status for an array of members</summary>
        </member>
        <member name="P:EmmaSharper.ChangeStatus.MemberIds">
            <summary>
            The array of member ids to change.
            </summary>
        </member>
        <member name="P:EmmaSharper.ChangeStatus.StatusTo">
            <summary>
            The new status for the given members. Accepts one of ‘a’ (active), ‘e’ (error), ‘o’ (optout).
            </summary>
        </member>
        <member name="T:EmmaSharper.CopyStatus">
            <summary>Copy all account members of one or more statuses into a group</summary>
        </member>
        <member name="P:EmmaSharper.CopyStatus.MemberStatusId">
            <summary>‘a’ (active), ‘o’ (optout), and/or ‘e’ (error)</summary>
        </member>
        <member name="P:EmmaSharper.DeleteMembers.MemberIds">
            <summary>
            An array of member ids to delete.
            </summary>
        </member>
        <member name="T:EmmaSharper.MemberBulk">
            <summary>
            Used to add new members or update existing members in bulk.
            </summary>
        </member>
        <member name="P:EmmaSharper.MemberBulk.MemberEmail">
            <summary>
            Email address of member to add or update
            </summary>
        </member>
        <member name="P:EmmaSharper.MemberBulk.Fields">
            <summary>
            Names and values of user-defined fields to update
            </summary>
        </member>
        <member name="T:EmmaSharper.MemberSignup">
            <summary>
            The class representing the returned properties when signing up a member.
            </summary>
        </member>
        <member name="P:EmmaSharper.MemberSignup.Status">
            <summary>
            The status of the member. The short status code will be returned as Active, Error, or Optout.
            </summary>
        </member>
        <member name="P:EmmaSharper.MemberSignup.MemberId">
            <summary>
            The member id of the member.
            </summary>
        </member>
        <member name="T:EmmaSharper.RemoveMemberGroups">
            <summary>
            Remove multiple members from groups.
            </summary>
        </member>
        <member name="P:EmmaSharper.RemoveMemberGroups.MemberIds">
            <summary>
            Member ids to remove from the given groups.
            </summary>
        </member>
        <member name="P:EmmaSharper.RemoveMemberGroups.GroupIds">
            <summary>
            Group ids from which to remove the given members.
            </summary>
        </member>
        <member name="P:EmmaSharper.SignupMember.MemberEmail">
            <summary>
            Email address of the member to sign-up.
            </summary>
        </member>
        <member name="P:EmmaSharper.SignupMember.GroupIds">
            <summary>
            An array of group ids to associate sign-up with.
            </summary>
        </member>
        <member name="P:EmmaSharper.SignupMember.Fields">
            <summary>
            Optional. Names and values of user-defined fields to update.
            </summary>
        </member>
        <member name="P:EmmaSharper.SignupMember.SignupFormId">
            <summary>
            Optional. Indicate that this member used a particular signup form. This is important if you have custom mailings for a particular signup form and so that signup-based triggers will be fired.
            </summary>
        </member>
        <member name="P:EmmaSharper.SignupMember.OptInSubject">
            <summary>
            Optional. Override the confirmation message subject with your own copy.
            </summary>
        </member>
        <member name="P:EmmaSharper.SignupMember.OptInMessage">
            <summary>
            Optional. Override the confirmation message body with your own copy. Must include the following tags: [rsvp_name], [rsvp_email], [opt_in_url], [opt_out_url].
            </summary>
        </member>
        <member name="P:EmmaSharper.SignupMember.FieldTriggers">
            <summary>
            Optional. Fires related field change autoresponders when set to true.
            </summary>
        </member>
        <member name="P:EmmaSharper.SignupMember.OptInConfirmation">
            <summary>
            Optional. Sends the default plaintext confirmation email when set to true. NOTE: Confirmation email will be sent by default if this parameter is left out.
            </summary>
        </member>
        <member name="T:EmmaSharper.UpdateMember">
            <summary>
            Update a single member’s information.
            </summary>
        </member>
        <member name="P:EmmaSharper.UpdateMember.MemberEmail">
            <summary>
            A new email address for the member.
            </summary>
        </member>
        <member name="P:EmmaSharper.UpdateMember.StatusTo">
            <summary>
            A new status for the member. Accepts one of ‘a’ (active), ‘e’ (error), ‘o’ (opt-out).
            </summary>
        </member>
        <member name="P:EmmaSharper.UpdateMember.Fields">
            <summary>
            An array of fields with associated values for this member
            </summary>
        </member>
        <member name="P:EmmaSharper.UpdateMember.FieldTriggers">
            <summary>
            Optional. Fires related field change autoresponders when set to true.
            </summary>
        </member>
        <member name="T:EmmaSharper.CreateWebhook">
            <summary>
            Properties associated with creating webhooks
            </summary>
        </member>
        <member name="P:EmmaSharper.CreateWebhook.PublicKey">
            <summary>
            The public_key to use for authentication. Note: this can also be spelled “user_id” but this is deprecated.
            </summary>
        </member>
        <member name="T:EmmaSharper.WebhookMethod">
            <summary>Webhook method enumeration</summary>
        </member>
        <member name="F:EmmaSharper.WebhookMethod.Get">
            <summary>
            Webhook uses HTTP GET
            </summary>
        </member>
        <member name="F:EmmaSharper.WebhookMethod.Post">
            <summary>
            Webhook uses HTTP POST
            </summary>
        </member>
        <member name="T:EmmaSharper.UpdateWebhook">
            <summary>
            Properties associated with updating webhooks
            </summary>
        </member>
        <member name="T:EmmaSharper.Webhook">
            <summary>
            
            </summary>
        </member>
        <member name="P:EmmaSharper.Webhook.WebhookId">
            <summary>
            The Id of the webhook
            </summary>
        </member>
        <member name="P:EmmaSharper.Webhook.AccountId">
            <summary>
            The ID associated with the webhook account
            </summary>
        </member>
        <member name="T:EmmaSharper.WebhookBase">
            <summary>
            Common Properties to all Webhook classes.
            </summary>
        </member>
        <member name="P:EmmaSharper.WebhookBase.Event">
            <summary>
            The name of an event to register this webhook for
            </summary>
        </member>
        <member name="P:EmmaSharper.WebhookBase.Url">
            <summary>
            The URL to call when the event happens
            </summary>
        </member>
        <member name="P:EmmaSharper.WebhookBase.Method">
            <summary>
            The method to use when calling the webhook. Can be GET or POST. Defaults to POST.
            </summary>
        </member>
        <member name="T:EmmaSharper.AutomationProvider">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.AutomationProvider.#ctor(EmmaSharper.IEmmaApiAdapter)">
            <inheritdoc cref="M:System.Object.#ctor"/>
        </member>
        <member name="M:EmmaSharper.AutomationProvider.GetWorkflows">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.AutomationProvider.GetWorkflowById(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.AutomationProvider.GetWorkflowCounts">
            <inheritdoc/>
        </member>
        <member name="T:EmmaSharper.FieldsProvider">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.FieldsProvider.#ctor(EmmaSharper.IEmmaApiAdapter)">
            <inheritdoc cref="M:System.Object.#ctor"/>
        </member>
        <member name="M:EmmaSharper.FieldsProvider.ListFieldsCount(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.FieldsProvider.ListFields(System.Boolean,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.FieldsProvider.GetField(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.FieldsProvider.CreateField(EmmaSharper.CreateField)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.FieldsProvider.DeleteField(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.FieldsProvider.ClearField(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.FieldsProvider.UpdateField(System.String,EmmaSharper.UpdateField)">
            <inheritdoc/>
        </member>
        <member name="T:EmmaSharper.GroupProvider">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.GroupProvider.#ctor(EmmaSharper.IEmmaApiAdapter)">
            <inheritdoc cref="M:System.Object.#ctor"/>
        </member>
        <member name="M:EmmaSharper.GroupProvider.ListGroupCount(System.Collections.Generic.IEnumerable{EmmaSharper.GroupType})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.GroupProvider.ListGroups(System.Collections.Generic.IEnumerable{EmmaSharper.GroupType},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.GroupProvider.CreateGroups(System.Collections.Generic.IEnumerable{EmmaSharper.GroupName})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.GroupProvider.GetGroup(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.GroupProvider.UpdateGroup(System.String,EmmaSharper.UpdateGroup)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.GroupProvider.DeleteGroup(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.GroupProvider.ListGroupMembersCount(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.GroupProvider.ListGroupMembers(System.String,System.Boolean,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.GroupProvider.AddMembersToGroup(System.String,EmmaSharper.MemberIdList)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.GroupProvider.RemoveMembersFromGroup(System.String,EmmaSharper.MemberIdList)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.GroupProvider.DeleteAllMembersFromGroup(System.String,System.Nullable{EmmaSharper.MemberStatusShort})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.GroupProvider.DeleteAllFromMemberGroupsByStatus(System.String,EmmaSharper.MemberStatusShort)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.GroupProvider.CopyUsersFromGroup(System.String,System.String,EmmaSharper.MemberStatusShortList)">
            <inheritdoc/>
        </member>
        <member name="T:EmmaSharper.MailingProvider">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.#ctor(EmmaSharper.IEmmaApiAdapter)">
            <inheritdoc cref="M:System.Object.#ctor"/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.ListMailingsCount(System.Collections.Generic.IEnumerable{EmmaSharper.MailingType},System.Collections.Generic.IEnumerable{EmmaSharper.MailingStatus},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.ListMailings(System.Collections.Generic.IEnumerable{EmmaSharper.MailingType},System.Collections.Generic.IEnumerable{EmmaSharper.MailingStatus},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.GetMailing(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.GetMailingMembersCount(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.GetMailingMembers(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.GetMailingMembersPersonalization(System.String,System.String,System.Nullable{EmmaSharper.PersonalizationType})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.GetMailingGroupsCount(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.GetMailingGroups(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.GetMailingSearches(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.UpdateMailingStatus(System.String,EmmaSharper.UpdateMailingStatus)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.ArchiveMailing(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.CancelMailing(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.ForwardMailing(System.String,System.String,EmmaSharper.ForwardMailing)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.ResendMailing(System.String,EmmaSharper.ResendMailing)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.GetHeadsUpEmailsForMailing(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.VaildatePersonalizationSyntax(EmmaSharper.MailingPersonalization)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MailingProvider.DeclareWinner(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:EmmaSharper.MemberProvider">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.#ctor(EmmaSharper.IEmmaApiAdapter)">
            <inheritdoc cref="M:System.Object.#ctor"/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.GetMemberCount(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.ListMembers(System.Boolean,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.GetMember(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.GetMemberByEmail(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.GetMemberOptout(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.UpdateMemberToOptoutByEmail(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.AddNewMembers(EmmaSharper.AddMembers)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.AddOrUpdateSingleMember(EmmaSharper.AddMember)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.MemberSignup(EmmaSharper.SignupMember)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.DeleteMembers(EmmaSharper.DeleteMembers)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.ChangeMemberStatus(EmmaSharper.ChangeStatus)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.UpdateSingleMemberInformation(System.String,EmmaSharper.UpdateMember)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.DeleteMember(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.GetMemberGroups(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.AddMemberToGroups(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.RemoveMemberFromGroups(System.String,System.Collections.Generic.List{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.DeleteAllMembers(EmmaSharper.MemberStatusShort)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.RemoveMemberFromAllGroups(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.RemoveMembersFromGroups(EmmaSharper.RemoveMemberGroups)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.GetMemberMailingHistoryCount(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.GetMemberMailingHistory(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.GetMembersAffectedByImportCount(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.GetMembersAffectedByImport(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.GetImportInformation(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.GetAllImportsCount">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.GetAllImports(System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.CopyMembersIntoStatusGroup(System.String,EmmaSharper.CopyStatus)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.MemberProvider.UpdateStatusOfGroupMembersBasedOnCurrentStatus(EmmaSharper.MemberStatusShort,EmmaSharper.MemberStatusShort,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:EmmaSharper.ResponseProvider">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.#ctor(EmmaSharper.IEmmaApiAdapter)">
            <inheritdoc cref="M:System.Object.#ctor"/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetResponseSummary(System.Nullable{EmmaSharper.DateRange},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetResponseSummary(System.Nullable{System.DateTime},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingResponse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingSendsCount(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingSends(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingInProgressCount(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingInProgress(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingDelieveriesCount(System.String,EmmaSharper.DeliveryType)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingDelieveries(System.String,EmmaSharper.DeliveryType,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingOpensCount(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingOpens(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingLinks(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingClicksCount(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingClicks(System.String,System.String,System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingForwards(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingOptoutsCount(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingOptouts(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingSignups(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingShares(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingCustomerShares(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingCustomerShareClicks(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingCustomerShare(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.ResponseProvider.GetMailingSharesOverview(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:EmmaSharper.SearchProvider">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SearchProvider.GetSearchesCount(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SearchProvider.GetSearches(System.Boolean,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SearchProvider.GetSearchDetails(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SearchProvider.CreateSavedSearch(EmmaSharper.CreateSearch)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SearchProvider.UpdateSavedSearch(System.String,EmmaSharper.CreateSearch)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SearchProvider.DeleteSavedSearch(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SearchProvider.GetMembersMatchingSearchCount(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SearchProvider.GetMembersMatchingSearch(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="T:EmmaSharper.SignupFormProvider">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SignupFormProvider.#ctor(EmmaSharper.IEmmaApiAdapter)">
            <inheritdoc cref="M:System.Object.#ctor"/>
        </member>
        <member name="M:EmmaSharper.SignupFormProvider.GetSignupForms">
            <inheritdoc/>
        </member>
        <member name="T:EmmaSharper.SubscriptionProvider">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SubscriptionProvider.#ctor(EmmaSharper.IEmmaApiAdapter)">
            <inheritdoc cref="M:System.Object.#ctor"/>
        </member>
        <member name="M:EmmaSharper.SubscriptionProvider.GetAccountSubscriptions(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SubscriptionProvider.GetAccountSubscription(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SubscriptionProvider.GetSubscriptionMembers(System.String,System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SubscriptionProvider.GetOptOutSubscriptionMembers(System.String,System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SubscriptionProvider.PostNewSubscription(EmmaSharper.SubscriptionNew)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SubscriptionProvider.PostBulkMemberSubscriptions(EmmaSharper.SubscriptionBulk,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SubscriptionProvider.PostBulkImportSubscriptions(EmmaSharper.SubscriptionImportBulk,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SubscriptionProvider.EditSubscription(EmmaSharper.SubscriptionNew,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.SubscriptionProvider.DeleteSubscription(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:EmmaSharper.WebhookProvider">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.WebhookProvider.#ctor(EmmaSharper.IEmmaApiAdapter)">
            <inheritdoc cref="M:System.Object.#ctor"/>
        </member>
        <member name="M:EmmaSharper.WebhookProvider.GetWebhooks">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.WebhookProvider.GetWebhookById(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.WebhookProvider.GetWebhookEvents">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.WebhookProvider.CreateWebhook(EmmaSharper.CreateWebhook)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.WebhookProvider.UpdateWebhook(System.String,EmmaSharper.UpdateWebhook)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.WebhookProvider.DeleteWebhookById(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:EmmaSharper.WebhookProvider.DeleteAllWebhooks">
            <inheritdoc/>
        </member>
        <member name="T:RestSharp.Serializers.EmmaJsonSerializer">
            <summary>
            Default JSON serializer for request bodies
            Doesn't currently use the SerializeAs attribute, defers to Newtonsoft's attributes
            </summary>
        </member>
        <member name="M:RestSharp.Serializers.EmmaJsonSerializer.#ctor">
            <summary>
            Default serializer
            </summary>
        </member>
        <member name="M:RestSharp.Serializers.EmmaJsonSerializer.#ctor(Newtonsoft.Json.JsonSerializer)">
            <summary>
            Default serializer with overload for allowing custom Json.NET settings
            </summary>
        </member>
        <member name="M:RestSharp.Serializers.EmmaJsonSerializer.Serialize(System.Object)">
            <summary>Serialize the object as JSON</summary>
            <param name="obj">Object to serialize</param>
            <returns>JSON as String</returns>
        </member>
        <member name="P:RestSharp.Serializers.EmmaJsonSerializer.DateFormat">
            <summary>Unused for JSON Serialization</summary>
        </member>
        <member name="P:RestSharp.Serializers.EmmaJsonSerializer.RootElement">
            <summary>Unused for JSON Serialization</summary>
        </member>
        <member name="P:RestSharp.Serializers.EmmaJsonSerializer.Namespace">
            <summary>Unused for JSON Serialization</summary>
        </member>
        <member name="P:RestSharp.Serializers.EmmaJsonSerializer.ContentType">
            <summary>Content type for serialized content</summary>
        </member>
    </members>
</doc>
